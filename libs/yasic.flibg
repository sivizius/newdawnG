macro yasic@@parseChar                  char&
  local stack0, stack1
  display `char, 10
  if ( yasic@@expectOperant )
    if 0                                                                                            ;precedence
    else if ( `char = 'not' )
      yasic@@push                       yasic@@tOperator,             yasic@@opPrefixLogicNot,      0x0e
    else if ( `char = '+' )
      yasic@@push                       yasic@@tOperator,             yasic@@opPrefixPositive,      0x0e
    else if ( `char = '-' )
      yasic@@push                       yasic@@tOperator,             yasic@@opPrefixNegative,      0x0e
    else if ( `char = '~' )
      yasic@@push                       yasic@@tOperator,             yasic@@opPrefixArithmeticNot, 0x0e
    else if ( `char = '&' )
      stack0                            yasic@@pop
      if ( stack0.value = yasic@@opArithmeticAnd )
        yasic@@push                     yasic@@tOperator,             yasic@@opLogicAnd,            0x07
      else
        err 10, '[asm:yasic] unknown operator.'
      end if
    else if ( `char = '|' )
      stack0                            yasic@@pop
      if      ( stack0.value = yasic@@opArithmeticOr )
        yasic@@push                     yasic@@tOperator,             yasic@@opLogicOr,             0x05
      else
        err 10, '[asm:yasic] unknown operator.'
      end if
    else if ( `char = '!' )
      stack0                            yasic@@pop
      if      ( stack0.value = yasic@@opArithmeticXor )
        yasic@@push                     yasic@@tOperator,             yasic@@opLogicXor,            0x06
      else
        err 10, '[asm:yasic] unknown operator.'
      end if
    else if ( `char = '=' )
      stack0                            yasic@@pop
      if      ( stack0.value = yasic@@opLet )
        yasic@@push                     yasic@@tOperator,             yasic@@opEqual,               0x09
      else if ( stack0.value = yasic@@opArithmeticXor )
        yasic@@push                     yasic@@tOperator,             yasic@@opUnequal,             0x09
      else if ( stack0.value = yasic@@opAbove )
        yasic@@push                     yasic@@tOperator,             yasic@@opAboveEqual,          0x09
      else if ( stack0.value = yasic@@opBelow )
        yasic@@push                     yasic@@tOperator,             yasic@@opBelowEqual,          0x09
      else
        err 10, '[asm:yasic] unknown operator.'
      end if
    else if ( `char = '>' )
      stack0                            yasic@@pop
      if      ( stack0.value = yasic@@opAbove )
        yasic@@push                     yasic@@tOperator,             yasic@@opUnsignedShiftRight,  0x0a
      else if ( stack0.value = yasic@@opUnsignedShiftRight )
        yasic@@push                     yasic@@tOperator,             yasic@@opSignedShiftRight,    0x0a
      else if ( stack0.value = yasic@@opBelow )
        yasic@@push                     yasic@@tOperator,             yasic@@opUnequal,             0x08
      else
        err 10, '[asm:yasic] unknown operator.'
      end if
    else if ( `char = '<' )
      stack0                            yasic@@pop
      if      ( stack0.value = yasic@@opBelow )
        yasic@@push                     yasic@@tOperator,             yasic@@opUnsignedShiftLeft,   0x0a
      else if ( stack0.value = yasic@@opUnsignedShiftLeft )
        yasic@@push                     yasic@@tOperator,             yasic@@opSignedShiftLeft,     0x0a
      else
        err 10, '[asm:yasic] unknown operator.'
      end if
    else if ( `char = '.' )
      stack0                            yasic@@pop
      if      ( stack0.value = yasic@@opDot )
        yasic@@push                     yasic@@tOperator,             yasic@@opConnectStrings,      0x0f
      else
        err 10, '[asm:yasic] unknown operator.'
      end if
    else if ( `char = '(' )
      yasic@@push                       yasic@@tParentheses,          yasic@@currentState
      yasic@@currentState               =                                       null
    else if ( `char = ')' )
      if ( yasic@@currentState = yasic@@tItem )
        stack0                          yasic@@pop
        yasic@@enque                    yasic@@tFunction,             stack0.value,                 stack0.size,        stack0.misc
        yasic@@expectOperant            =                                       false
      else
        err 10, '[asm:yasic] unexpected »)«'
      end if
    else if ( `char = ',' )
      err 10, '[asm:yasic] does not expect a list of arguments'
    else
      If ( yasic@@ptrStack >= 32 )
        stack0                          yasic@@pop
        stack1                          yasic@@pop
        if      (( stack0.type = yasic@@tOperator ) & \
                 ( stack1.type = yasic@@tOperator ) & \
                 ( stack0.size < stack1.size ))                       ;size = precedence
          yasic@@enque                  stack1.type,                  stack1.value,                 stack1.size,        stack1.misc
        else if (( stack0.type = yasic@@tOperator ) & \
                 ( stack1.type = yasic@@tOperator ) & \
                 ( stack1.size <> 5 )               & \               ;a^b^c -> abc^^
                 ( stack0.size = stack1.size ))
          yasic@@enque                  stack1.type,                  stack1.value,                 stack1.size,        stack1.misc
        else
          yasic@@push                   stack1.type,                  stack1.value,                 stack1.size,        stack1.misc
        end if
        yasic@@push                     stack0.type,                  stack0.value,                 stack0.size,        stack0.misc
      end if
      if ~ ( defined char )
        if ( defined char#@@type )
          if ( char#@@type = yasic@@tFunction )
            yasic@@push                 yasic@@tFunction,             char#@@value,                 char#@@size,        yasic@@currentState
            yasic@@currentState         =                             yasic@@tFunction
          else
            yasic@@enque                char#@@type,                  char#@@value,                 char#@@size,        null
          end if
        else
          err 10, '[asm:yasic] undefined variable'
        end if
      else if ( char eqtype 12345 )
        yasic@@enque                    yasic@@tConstant,             char
      else if ( char eqtype 'abc' )
        stack0                          yasic@@newString              char
        yasic@@enque                    yasic@@tConstString,          stack0.value,                 stack0.size
      else
        err 10, '[asm:yasic] unknown symbol: »', `char, '«'
      end if
      yasic@@expectOperant              =                                       false
    end if
  else
    yasic@@expectOperant                =                                       true
    if (( `char <> '(' ) & ( yasic@@currentState = yasic@@tFunction ))
      err 10, '[asm:yasic] »(« expected after function'
    end if
    if 0
    else if ( `char = '&' )
      yasic@@push                       yasic@@tOperator,             yasic@@opArithmeticAnd,       0x05
    else if ( `char = '|' )
      yasic@@push                       yasic@@tOperator,             yasic@@opArithmeticOr,        0x07
    else if ( `char = '!' )
      yasic@@push                       yasic@@tOperator,             yasic@@opArithmeticXor,       0x06
    else if ( `char = '+' )
      yasic@@push                       yasic@@tOperator,             yasic@@opAdd,                 0x0b
    else if ( `char = '-' )
      yasic@@push                       yasic@@tOperator,             yasic@@opSub,                 0x0b
    else if ( `char = '*' )
      yasic@@push                       yasic@@tOperator,             yasic@@opMul,                 0x0c
    else if ( `char = '/' )
      yasic@@push                       yasic@@tOperator,             yasic@@opDiv,                 0x0c
    else if ( `char = '%' )
      yasic@@push                       yasic@@tOperator,             yasic@@opMod,                 0x0c
    else if ( `char = '^' )
      yasic@@push                       yasic@@tOperator,             yasic@@opPower,               0x0d
    else if ( `char = '>' )
      yasic@@push                       yasic@@tOperator,             yasic@@opAbove,               0x09
    else if ( `char = '<' )
      yasic@@push                       yasic@@tOperator,             yasic@@opBelow,               0x09
    else if ( `char = '.' )
      yasic@@push                       yasic@@tOperator,             yasic@@opDot,                 0x0f
    else if ( `char = 'and' )
      yasic@@push                       yasic@@tOperator,             yasic@@opLogicAnd,            0x04
    else if ( `char = 'or' )
      yasic@@push                       yasic@@tOperator,             yasic@@opLogicOr,             0x02
    else if ( `char = 'xor' )
      yasic@@push                       yasic@@tOperator,             yasic@@opLogicXor,            0x03
    else if ( `char = '=' )
      yasic@@push                       yasic@@tOperator,             yasic@@opLet,                 0x01
    else if ( `char = ')' )
      yasic@@expectOperant              =                                       false
      if ( yasic@@ptrStack < 16 )
        err 10, '[asm:yasic] excess closing parenthesis'
      end if
      while ( yasic@@ptrStack >= 16 )
        stack0                          yasic@@pop
        if      ( stack0.type = yasic@@tParentheses )
          ;yasic@@push                   stack0.type,                  stack0.value,                 stack0.size,        stack0.misc
          yasic@@currentState           =                                       stack0.misc
          break
        else if (( stack0.type = yasic@@tFunction ) & ( yasic@@currentState = yasic@@tItem ))
          yasic@@enque                  yasic@@tFunction,             stack0.value,                 stack0.size,        stack0.misc
          break
        else
          yasic@@enque                  stack0.type,                  stack0.value,                 stack0.size,        stack0.misc
        end if
      end while
    else if ( `char = '(' )
      if ( yasic@@currentState = yasic@@tFunction )
        yasic@@enque                    yasic@@tItem,                 null
        yasic@@currentState             =                                       yasic@@tItem
      else
        err 10, '[asm:yasic] unexpected »(«'
      end if
    else if ( `char = ',' )
      if ( yasic@@currentState = yasic@@tItem )
        while ( yasic@@ptrStack >= 16 )
          stack0                      yasic@@pop
          if      ( stack0.type = yasic@@tFunction )
            yasic@@push                 yasic@@tFunction,             stack0.value,                 stack0.size,        stack0.misc
            break
          else if ( stack0.type = yasic@@tItem )                      ;<comming soon>
            yasic@@push                 yasic@@tItem,                 stack0.value,                 stack0.size,        stack0.misc
            break
          else
            yasic@@enque                stack0.type,                  stack0.value,                 stack0.size,        stack0.misc
          end if
        end while
      end if
    else
      err 10, '[asm:yasic] unexpected operator'
    end if
  end if
end macro

macro yasic@@parseExpression            theExpression&
  yasic@@expectOperant                  =                                       true
  yasic@@currentState                   =                                       null
  local lstExpression, charExpression, restExpression, temp
  define                                lstExpression                           theExpression
  while true
    match charExpression restExpression, lstExpression
      define                            lstExpression                           restExpression
      yasic@@parseChar                  charExpression
    else
      match any, lstExpression
        yasic@@parseChar                any
      end match
      break
    end match
  end while
  while ( yasic@@ptrStack > 0 )
    temp                                yasic@@pop
    yasic@@enque                        temp.type,          temp.value,         temp.size,          temp.misc
  end while
end macro

macro yasic@@displayExpression
  display 10
  local temp
  yasic@@ptrQueque                      =                                       null
  while ( yasic@@ptrQueque < yasic@@endQueque )
    temp                                yasic@@deque
    if      ( temp.type = yasic@@tOperator )
      display '['
      yasic@@opDisplay                  temp.value
      display ']'
    else if ( temp.type = yasic@@tParentheses )
      err 10, '[asm:yasic] missing closing parenthesis'
    else if ( temp.type = yasic@@tItem )
      display '{'
    else if ( temp.type = yasic@@tFunction )
      display '}->(0x'
      displayHexQWord temp.value
      display ')'
    else if ( temp.type = yasic@@tConstByte )
      display '(0x'
      displayHexByte ( temp.value )
      display ')'
    else if ( temp.type = yasic@@tConstWord )
      display '(0x'
      displayHexWord ( temp.value )
      display ')'
    else if ( temp.type = yasic@@tConstDWord )
      display '(0x'
      displayHexDWord ( temp.value )
      display ')'
    else if ( temp.type = yasic@@tConstQWord )
      display '(0x'
      displayHexQWord ( temp.value )
      display ')'
    else if ( temp.type = yasic@@tConstant )
      display '(0x'
      displayHexQWord ( temp.value )
      display ')'
    else if ( temp.type = yasic@@tConstString )
      display '(»'
      yasic@@displayString              temp
      display '«)'
    end if
  end while
end macro
macro yasic@@compileExpression
  local temp
  yasic@@ptrQueque                      =                                       null
  while ( yasic@@ptrQueque < yasic@@endQueque )
    temp                                yasic@@deque
    if      ( temp.type = yasic@@tOperator )
      yasic@@opCompile                  temp.value
    else if ((( temp.type >= yasic@@tConstByte ) & ( temp.type <= yasic@@tConstQWord )) | temp.type <= yasic@@tConstant )
      pushConstant                      temp.value
    else if ( temp.type = yasic@@tParentheses )
      err 10, '[asm:yasic] missing closing parenthesis'
    else
      err 10, '[asm:yasic] cannot compile this'
    end if
  end while
end macro

macro fbc0@@killMySelf
  stop
  display 10, 'list of functions:', 10
  yasic@@global                         equ                                     -
  yasic@@lstFunctions
  fbc0@@killMySelf
end macro