macro yasic@@ctrLocalVariables
end macro
macro yasic@@numLocalVariables
end macro
macro pushExpression                    expression*
  yasic@@parseExpression                expression
  yasic@@displayExpression
  yasic@@optimiseExpression
  yasic@@displayExpression
  yasic@@compileExpression
end macro
macro yasic@@newType                    theType*,                               theSize*
  yasic@@#theType#_ctrData              =                                       null
  yasic@@#theType#_ctrResv              =                                       null
  yasic@@#theType#_theID                =                                       yasic@@idOfType
  yasic@@idOfType                       =                                       ( yasic@@idOfType + 1 )
  store                                 word theSize                            at yasic@@lblTypes:( yasic@@#theType#_theID * __word__ )
  macro yasic@@ctrLocalVariables
    yasic@@ctrLocalVariables
    if ( .#theType#_numVars > null )
      pushConstant                      yasic@@#theType#_theID
      pushConstant                      .#theType#_numVars
      allocLocal
    end if
    .#theType#_ctrVars                  =                                       null
  end macro
  macro yasic@@numLocalVariables
    yasic@@numLocalVariables
    .#theType#_numVars                  =                                       .#theType#_ctrVars
  end macro
  macro theType                         declaration&
    local varName, anExpression
    local aParameter, restParameters, theParameters, lstParameters
    local type, parameter, default, hazDefault
    match                               varName =( theParameters =),            declaration                   ;<function>
      match                             +,                                      yasic@@global
        macro varName                   arguments&
          local anArgument, restArguments, theArguments, lstArguments
          local aParameter, theType, theParameter, theDefault
          display 'call ', `varName, '()'
          match                         =( theArguments =),                     arguments
            define                      lstArguments                            theArguments
            irpv                        aParameter,                             yasic@@#varName#_params
              match                     anArgument =, restArguments,            lstArguments
                define                  lstArguments                            restArguments
                match                   theType =, theParameter =, theDefault,  aParameter
                  display 10, '  ', `anArgument, ' -> ', `theParameter, 10
                  pushExpression        anArgument
                else match              theType =, theParameter,                aParameter
                  display 10, '  ', `anArgument, ' -> ', `theParameter, 10
                  pushExpression        anArgument
                end match
              else match                anArgument,                             lstArguments
                define                  lstArguments
                match                   theType =, theParameter =, theDefault,  aParameter
                  display 10, '  ', `anArgument, ' +> ', `theParameter, 10
                  pushExpression        anArgument
                else match              theType =, theParameter,                aParameter
                  display 10, '  ', `anArgument, ' +> ', `theParameter, 10
                  pushExpression        anArgument
                end match
              else match                ,                                       lstArguments
                match                   theType =, theParameter =, theDefault,  aParameter
                  display 10, '  ', `theDefault, ' => ', `theParameter, 10
                  pushExpression        theDefault
                else
                  err 10, '[asm:yasic] not enought arguments'
                end match
              end match
            end irpv
          end match
          call                          yasic@@#varName#_address
        end macro
        ;( parse parameters )
        define                          lstParameters                           theParameters
        define                          hazDefault                              false
        while ( true )
          match                         aParameter =, restParameters,           lstParameters
            define                      lstParameters                           restParameters
            match                       type parameter == default,              aParameter
              define                    hazDefault                              true
              yasic@@#varName#_params   equ                                     type, parameter, default
            else match                  parameter == default,                   aParameter
              define                    hazDefault                              true
              yasic@@#varName#_params   equ                                     void, parameter, default
            else match                  type parameter,                         aParameter
              match                     =false,                                 hazDefault
                yasic@@#varName#_params equ                                     type, parameter
              else
                err 10, '[asm:yasic] already haz parameters with default values'
              end match
            else
              match                     =false,                                 hazDefault
                yasic@@#varName#_params equ                                     void, aParameter
              else
                err 10, '[asm:yasic] already haz parameters with default values'
              end match
            end match
          else match                    aParameter,                             lstParameters
            match                       type parameter == default,              aParameter
              define                    hazDefault                              true
              yasic@@#varName#_params   equ                                     type, parameter, default
            else match                  parameter == default,                   aParameter
              define                    hazDefault                              true
              yasic@@#varName#_params   equ                                     void, parameter, default
            else match                  type parameter,                         aParameter
              match                     =false,                                 hazDefault
                yasic@@#varName#_params equ                                     type, parameter
              else
                err 10, '[asm:yasic] already haz parameters with default values'
              end match
            else
              match                     =false,                                 hazDefault
                yasic@@#varName#_params equ                                     void, aParameter
              else
                err 10, '[asm:yasic] already haz parameters with default values'
              end match
            end match
            break
          end match
        end while
        macro end?.theType!
          local temp
          stop
          display '}', 10
          yasic@@numLocalVariables
          yasic@@global                 equ                                     +
          temp                          uf4@@endLayer                           ;</function>
          yasic@@#varName#_address      =                                       ( temp )
          yasic@@#varName#_lenght       =                                       ( temp.size )
          purge end?.theType
        end macro
        uf4@@newLayer                                                           ;<function>
        yasic@@global                   equ                                     -
        lbl                             varName
        yasic@@ctrLocalVariables
        display `theType, ' = function ', `varName, ' ( ', `theParameters, ' ):', 10
        display '{', 10
      else match                        ==,                                     yasic@@global
        err 10, '[asm:yasic] oop is not implemented yet'
      else
        err 10, '[asm:yasic] declaration of function inside another function is not allowed'
      end match
    else match                          varName == anExpression,                declaration                   ;<variables>
      match                             +,                                      yasic@@global
        display 'global  ', `theType, ' ', `varName, ' = ', `anExpression, ';', 10
        macro varName                   value*
          local expression
          match                         == expression,                          value
            display 'let ', `varName, ' equal to ', `expression, 10
          else match                    +== expression,                         value
            display 'let ', `varName, ' equal to ', `varName, ' + ( ', `expression, ' )', 10
           else
            err 10, '[asm:yasic] invalid assign'
          end match
        end macro
      else
        display '  local ', `theType, ' ', `varName, ' = ', `anExpression, ';', 10
        .var#varName#_value             =                                       ( .#theType#_ctrVars )
        .#theType#_ctrVars              =                                       ( .#theType#_ctrVars + 1 )
        macro varName                   value*
          local expression
          match                         == expression,                          value
            display '  let ', `varName, ' equal to »', `expression, '«', 10
            display '  '
            yasic@@parseExpression      expression
            yasic@@displayExpression
            yasic@@compileExpression
            pushConstant                yasic@@#theType#_theID
            pushConstant                .var#varName#_value
            let
          else match                    +== expression,                         value
            display '  let ', `varName, ' equal to ', `varName, ' + ( ', `expression, ' )', 10
          else
            err 10, '[asm:yasic] invalid assign'
          end match
        end macro
      end match
    end match
  end macro
end macro