macro parse                             fileName
  virtual                               at 0
    lblInput::
      file                              fileName
      db                                10
    size                                =                                       $
  end virtual
  virtual                               at 0
    lblString::
      rb                                256
  end virtual
  ptrString                             =                                       0
  macro replace                         iString,                                oString
    local cmpString, outString
    virtual                             at 0
      cmpString::
        db                              iString
      iSize                             =                                       $
    end virtual
    virtual                             at 0
      outString::
        db                              oString
      oSize                             =                                       $
    end virtual
    if ( ptrString = iSize )
      isEqual                           =                                       1
      repeat ( ptrString ), offsString:0
        load                            iChar byte                              from cmpString:( offsString )
        load                            sChar byte                              from lblString:( offsString )
        if ( iChar >= 'A' & iChar <= 'Z' )
          iChar                         =                                       ( iChar - 'A' + 'a' )
        end if
        if ( sChar >= 'A' & sChar <= 'Z' )
          sChar                         =                                       ( sChar - 'A' + 'a' )
        end if
        ;display iChar, ' == ', sChar, '?', 10
        if ( iChar <> sChar )
          isEqual                       =                                       0
          break
        end if
      end repeat
      if ( isEqual = 1 )
        ;display 'equal!', 10
        repeat ( oSize ), offsString:0
          load                          temp byte                               from outString:( offsString )
          store                         byte temp                               at   lblString:( offsString )
        end repeat
        ptrString                       =                                       oSize
      else
        ;display 'unequal!', 10
      end if
    end if
  end macro
  string                                =                                       0
  remark                                =                                       0
  repeat ( size ), offsInput:0
    load                                char byte                               from lblInput:( offsInput )
    if (( string = 0 ) & ( char = 10 | ( char = ' ' & remark = 0 )))
      remark                            =                                       0
      replace                           'macro',                                'Macro'
      replace                           'match',                                'Match'
      replace                           'repeat',                               'Repeat'
      replace                           'while',                                'While'
      replace                           'if',                                   'If'
      replace                           'else',                                 'Else'
      replace                           'end',                                  'End'
      replace                           'break',                                'Break'
      replace                           'at',                                   'At'
      replace                           'equ',                                  'Equ'
      replace                           'local',                                'Local'
      replace                           'purge',                                'Purge'
      replace                           'virtual',                              'Virtual'
      replace                           'include',                              'Include'
      replace                           'struc',                                'Struc'
      replace                           'store',                                'Store'
      replace                           'load',                                 'Load'
      replace                           'irp',                                  'Irp'
      replace                           'irpv',                                 'Irpv'
      repeat ( ptrString ), offsString:0
        load                            temp byte                               from lblString:( offsString )
        db                              temp
      end repeat
      db                                char
      ptrString                         =                                       0
    else if ( char = "'" )
      if ( string = 0 )
        string                          =                                       "'"
      else if ( string = "'" )
        string                          =                                       0
      end if
      store                             byte char                               at  lblString:( ptrString )
      ptrString                         =                                       ( ptrString + 1 )
    else if ( char = '"' )
      if ( string = 0 )
        string                          =                                       '"'
      else if ( string = '"' )
        string                          =                                       0
      end if
      store                             byte char                               at  lblString:( ptrString )
      ptrString                         =                                       ( ptrString + 1 )
    else if (( string = 0 ) & ( char = ";" ))
      remark                            =                                       1
      store                             byte char                               at  lblString:( ptrString )
      ptrString                         =                                       ( ptrString + 1 )
    else
      store                             byte char                               at  lblString:( ptrString )
      ptrString                         =                                       ( ptrString + 1 )
    end if
  end repeat
end macro