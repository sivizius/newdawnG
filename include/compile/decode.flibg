Macro compile@@decode                   context*, address*, size*, main*
  Local hazFunction, callFunction
  Local numArguments, numStackArguments, numRegisterArguments, minErshov, maxErshov
  ;( list of functions i have to parse )
  ;{
    Local lblFunctions, theFunctions, ctrFunctions, numFunctions, sizeFunctions
    Local getFunction, addFunction
    ctrFunctions                        =                                       null
    theFunctions                        =                                       null
    sizeFunctions                       =                                       ( 4 )
    Virtual                             At null
      lblFunctions::
        RB                              ( numFunctions * sizeFunctions )
        ;:  0x00  dword fbc-address
    End Virtual
    Struc getFunction                   offs*
      Local temp
      Load                              temp dword                              From lblFunctions:( offs * sizeFunctions )
      .                                 =                                       ( temp )
    End Struc
    Macro addFunction                   fbcAddress*
      Store                             dword fbcAddress                        At lblFunctions:( ctrFunctions * sizeFunctions )
      ctrFunctions                      =                                       ( ctrFunctions + 1 )
    End Macro
  ;}
  ;( register-arguments )
  ;{
    Local lblArguments, sizeArguments, ptrArguments
    sizeArguments                       =                                       ( 16 )
    ptrArguments                        =                                       null
    Virtual                             At null
      lblArguments::
        RB                              ( sizeArguments * compile@@numOfArgsInRegs )
        ;:  0x00  byte  type
        ;:  0x02  word  ershov
        ;:  0x08  qword value
    End Virtual
  ;}
  ;( register-allocation )
  ;{
    Local lblRegularRegister
    Local allocRegister, freeRegister
    Virtual                             At null
      lblRegularRegister::
        RB                              compile@@numOfRegularRegs
    End Virtual
    Macro free                          register*
      If (( register >= 0 ) & ( register < compile@@numOfRegularRegs ))
        Store                           byte  null                              At    lblRegularRegister:( register )
      End If
    End Macro
    Struc allocRegister
      Local temp
      Repeat ( compile@@numOfRegularRegs )
        Load                            temp  byte                              From  lblRegularRegister:( % - 1 )
        If ( temp = 0x00 )
          .                             =                                       ( % - 1 )
          Break
        End If
      End Repeat
      .                                 =                                       nil
    End Struc
  ;}
  ;( map fbc-address -> real address )
  ;{
;    Local lblJumps, ctrJumps, numJumps, sizeJumps
;    Local addJump
;    ctrJumps                            =                                       null
;    sizeJumps                           =                                       ( 8 )
;    Virtual                             At null
;      lblJumps::
;        RB                              ( numJumps * sizeJumps )
;        ;:  0x00  dword fbc-address
;        ;:  0x00  dword real address
;    End Virtual
;    Macro addJump                       fbcAddress*,                            newAddress*
;      Store                             dword fbcAddress                        At lblJumps:(( ctrJumps * sizeJumps ) + 0x00 )
;      Store                             dword newAddress                        At lblJumps:(( ctrJumps * sizeJumps ) + 0x04 )
;      ctrJumps                          =                                       ( ctrJumps + 1 )
;    End Macro
  ;}
  ;( pure functional instructions with two arguments, e.g. `add a, b` )
  ;{
    Local operator
    Macro operator                      name*,                                  value*
      If ( compile@@ptrStack < 32 )
        fail < '[asm:compile] ', name, ' need 2 arguments in stack' >
      End If
      displayDeep '#', name, 10
      compile@@push                     fbc0@@tOperator,                        ( value )
    End Macro
  ;}
  ;( indented display )
  ;{
    ;may removed later
    Local deepness
    Macro displayDeep                   string&
      Repeat ( deepness )
        display '  '
      End Repeat
      display string
    End Macro
    deepness                            =                                       1
  ;}
  Local ptrBase, ptrStop, ptrMain
  ptrBase                               =                                       ( address )
  ptrStop                               =                                       ( address + size )
  If (( main >= null ) & ( main < size ))
    ptrMain                             =                                       ( ptrBase + main )
  Else
    ptrMain                             =                                       ( ptrBase )
  End If
  Local instruction, temp, lenght, char
  While ( true )
    If (( ptrMain < ptrBase ) | ( ptrMain >= ptrStop ))
      fail '[asm:compile] invalid instruction-pointer'
    End If
    Load                                instruction byte                        From context:( ptrMain )
    ;display 'addr: 0x'
    ;displayHexWord ptrMain
    ;display ': '
    ptrMain                             =                                       ( ptrMain + 1 )
    ;displayValue 'inst: 0x', instruction
    If      ( instruction = fbc0@@opPushByte )
      Load                              temp byte                               From context:( ptrMain )
      displayDeep '#pushByte 0x'
      displayHexByte temp
      display 10
      ptrMain                           =                                       ( ptrMain + 1 )
      compile@@push                       fbc0@@tConstant,                        ((( temp and 0x00000080 ) * 0xffffffffffffff00 ) or temp )
    Else If ( instruction = fbc0@@opPushWord )
      Load                              temp word                               From context:( ptrMain )
      displayDeep '#pushWord 0x'
      displayHexWord temp
      display 10
      ptrMain                           =                                       ( ptrMain + 2 )
      compile@@push                       fbc0@@tConstant,                        ((( temp and 0x00008000 ) * 0xffffffffffff0000 ) or temp )
    Else If ( instruction = fbc0@@opPushDWord )
      Load                              temp dword                              From context:( ptrMain )
      displayDeep '#pushDWord 0x'
      displayHexDWord temp
      display 10
      ptrMain                           =                                       ( ptrMain + 4 )
      compile@@push                       fbc0@@tConstant,                        ((( temp and 0x80000000 ) * 0xffffffff00000000 ) or temp )
    Else If ( instruction = fbc0@@opPushQWord )
      Load                              temp qword                              From context:( ptrMain )
      displayDeep '#pushQWord 0x'
      displayHexQWord temp
      display 10
      ptrMain                           =                                       ( ptrMain + 8 )
      compile@@push                       fbc0@@tConstant,                        ( temp )
    Else If ( instruction = fbc0@@opAdd )
      operator                          'add',                                  instruction
    Else If ( instruction = fbc0@@opSub )
      operator                          'sub',                                  instruction
    Else If ( instruction = fbc0@@opMul )
      operator                          'mul',                                  instruction
    Else If ( instruction = fbc0@@opDiv )
      operator                          'div',                                  instruction
    Else If ( instruction = fbc0@@opMod )
      operator                          'mod',                                  instruction
    Else If ( instruction = fbc0@@opNot )
      operator                          'not',                                  instruction
    Else If ( instruction = fbc0@@opAnd )
      operator                          'and',                                  instruction
    Else If ( instruction = fbc0@@opOr )
      operator                          'or',                                   instruction
    Else If ( instruction = fbc0@@opXor )
      operator                          'xor',                                  instruction
    Else If ( instruction = fbc0@@opLogicalNot )
      operator                          'lnot',                                 instruction
    Else If ( instruction = fbc0@@opLogicalAnd )
      operator                          'land',                                 instruction
    Else If ( instruction = fbc0@@opLogicalOr )
      operator                          'lor',                                  instruction
    Else If ( instruction = fbc0@@opLogicalXor )
      operator                          'lxor',                                 instruction
    Else If ( instruction = fbc0@@opFunction )
      Load                              temp dword                              From context:( ptrMain + fbc0@@offFunctionMyName - 1 )
      If      ( compile@@ptrStringYapter = null )
        fail '[asm:compile] there is no string-yapter'
      Else If (( temp < 2 ) | (( compile@@lenStringYapter - temp ) < 0 ))
        fail '[asm:compile] pointer out of bonds'
      Else
        Load                            lenght word                             From context:( compile@@ptrStringYapter + temp - 2 )
        If (( compile@@lenStringYapter - temp ) < lenght )
          fail '[asm:compile] corrupted string'
        End If
        displayDeep ''
        Repeat ( lenght )
          Load                          char byte                               From context:( compile@@ptrStringYapter + temp + % - 1 )
          display char
        End Repeat
        display '()', 10
        displayDeep '{', 10
        deepness                        =                                       ( deepness + 1 )
        ptrMain                         =                                       ( ptrMain + fbc0@@lenFunctionHeader - 1 )
      End If
    Else If ( instruction = fbc0@@opLoop )
      temp                              compile@@popArgument                    compile@@wantConstantArgument
      displayDeep '#loop', 10
      displayDeep '#{', 10
      deepness                          =                                       ( deepness + 1 )
      ptrMain                           compile@@pushCall                       ( temp.value + ptrBase )
    Else If ( instruction = fbc0@@opBreak )
      displayDeep                       '#break', 10
    Else If ( instruction = fbc0@@opDone )
      deepness                          =                                       ( deepness - 1 )
      displayDeep '#}', 10
      temp                              compile@@popCall
;      If (( temp.ptrStack - compile@@ptrStack ) = temp.ctrArguments * 16 )
;        fail '[asm:compile] stack-pointer after call must be equal to stack-pointer before call minus arguments'
;      End If
      ptrMain                           =                                       ( temp.theAddress )
      compile@@ptrQueque                  =                                       ( temp.ptrQueque )
    Else If ( instruction = fbc0@@opAllocLocal )
      displayDeep '#allocLocal', 10
    Else If ( instruction = fbc0@@opLet )
      displayDeep '#let', 10
    Else If ( instruction = fbc0@@opCall )
      temp                              compile@@popArgument                    compile@@wantConstantArgument
      callFunction                      =                                       temp.value
      Load                              temp byte                               From context:( ptrBase + callFunction + fbc0@@offFunctionInstruction )
      If ( temp = fbc0@@opFunction )
        ;( only for debug )
        ;{
          Load                          temp dword                              From context:( ptrBase + callFunction + fbc0@@offFunctionMyName )
          If      ( compile@@ptrStringYapter = null )
            fail '[asm:compile] there is no string-yapter'
          Else If (( temp < 2 ) | (( compile@@lenStringYapter - temp ) < 0 ))
            fail '[asm:compile] pointer out of bonds'
          Else
            Load                        lenght word                             From context:( compile@@ptrStringYapter + temp - 2 )
            If (( compile@@lenStringYapter - temp ) < lenght )
              fail '[asm:compile] corrupted string'
            End If
            displayDeep '#call '
            Repeat ( lenght )
              Load                      char byte                               From context:( compile@@ptrStringYapter + temp + % - 1 )
              display char
            End Repeat
            display ' -> (0x'
            displayHexWord ( callFunction )
            display ')', 10
          End If
        ;}
        ;( is function already in the list? append it if not )
        ;{
          hazFunction                   =                                       nil
          Repeat ( ctrFunctions ), offs:( null )
            temp                        getFunction                             offs
            If ( temp = callFunction )
              hazFunction               =                                       ctrFunction
              Break
            End If
          End Repeat
          If ( hazFunction = nil )
            addFunction                 callFunction
          End If
        ;}
        ;( get number of arguments )
        ;{
          Load                          numArguments word                       From context:( ptrBase + callFunction + fbc0@@offFunctionNumArguments )
          If ( numArguments = 0xffff )  ;first constant value in stack is the number of arguments
            numArguments                compile@@popArgument                    compile@@wantConstantArgument
          End If
          If ( numArguments > compile@@numOfArgsInRegs )
            numRegisterArguments        =                                       compile@@numOfArgsInRegs
            numStackArguments           =                                       ( numArguments - compile@@numOfArgsInRegs )
          Else
            numRegisterArguments        =                                       numArguments
            numStackArguments           =                                       null
          End If
        ;}
        ;( pop stack-arguments )
        ;{
          Repeat ( numStackArguments )
            temp                        compile@@popArgument
            ;
          End Repeat
        ;}
        ;( pop register-arguments )
        ;{
          ;( pop arguments )
          ;{
            ptrArguments                =                                       null
            minErshov                   =                                       null
            maxErshov                   =                                       null
            Repeat ( numRegisterArguments )
              temp                      compile@@popArgument
              Store                     byte  temp.type                         At lblArguments:( ptrArguments + 0x00 )
              Store                     word  temp.ershov                       At lblArguments:( ptrArguments + 0x02 )
              Store                     qword temp.value                        At lblArguments:( ptrArguments + 0x08 )
              If      ( minErshov < temp.ershov )
                minErhov                =                                       temp.ershov
                maxErshov               =                                       temp.ershov
              Else If ( minErshov = temp.ershov )
                maxErshov               =                                       ( temp.ershov + 1 )
              End If
              ptrArguments              =                                       ( ptrArguments + 1 )
            End Repeat
          ;}
          ;( enque arguments )
          ;{
            
          ;}
        ;}
      Else
        fail '[asm:compile] this type of call is not implemented yet'
      End If
    Else If ( instruction = fbc0@@opStop )
      deepness                          =                                       ( deepness - 1 )
      displayDeep '}', 10
      If ( theFunctions = ctrFunctions )
        Break
      Else
        temp                            getFunction                             theFunctions
        If (( temp >= null ) & ( temp < size ))
          ptrMain                       =                                       ( ptrBase + temp )
          theFunctions                  =                                       ( theFunctions + 1 )
        Else
          fail '[asm:compile] uhm, thats weird'
        End If
      End If
    Else
      temp                              fbc0@@mnemonic                          instruction
      displayValue 'instruction: 0x', instruction
      fail < '[asm:compile] invalid instruction: »', temp, '«' >
    End If
  End While
  Purge operator
  numFunctions                          =                                       ( ctrFunctions )
  ;numJumps                              =                                       ( ctrJumps )
End Macro