Include 'include/display.flibg'
Include 'include/fruitbot/version_0.flibg'
Include 'include/fruitbot/opcodes.flibg'
Include 'include/compile/arguments.flibg'
Include 'include/compile/calls.flibg'
Include 'include/compile/decode.flibg'

;( modules )
;{
  compile@@initModules                  Equ
  compile@@finishModules                Equ
  ;:this will only load modules, but it will do not initalise them.
  Include 'modules/linux/echo.fmodg'
;}

Macro compile@@buildYapter              address,  type,     size,     resv,     misc,     pointer,  dword0,   dword1,   dword2,   lblInputFile
  If ( compile@@lenMagic = 0 )
    compile@@lenMagic                   =                                       ( address )
    Repeat ( compile@@lenMagic )
      Load                              char byte                               From lblInputFile:( % - 1 )
      db                                char
    End Repeat
  End If
  If      ( type = null )
    compile@@ycontent                   =                                       ( address + 16 )
    Break
  Else If ( type = fbc0@@yBytecode )
    ;type : machine : size : main : pointer
    uf4@@newLayer
      Repeat ( dword0 ), offs:( 0 )
        Load                            char byte                               From lblInputFile:( compile@@ycontent + dword2 + offs )
        db                              char
      End Repeat
    temp                                uf4@@endLayer
    uf4@@addYapterD                     type,     size,     temp.size,          dword1,             temp
  Else If ( type = fbc0@@yStrings )
    ;type : null : size : null : pointer
    uf4@@newLayer
      Repeat ( dword0 ), offs:( 0 )
        Load                            char byte                               From lblInputFile:( compile@@ycontent + dword2 + offs )
        db                              char
      End Repeat
    temp                                uf4@@endLayer
    uf4@@addYapterD                     type,     size,     temp.size,          dword1,             temp
    compile@@ptrStringYapter            =                                       ( compile@@ycontent + dword2 )
    compile@@lenStringYapter            =                                       dword0
;    displayValue '*0x', compile@@ptrStringYapter
  Else
    displayValue 'type: 0x', type
    fail '[asm:compile] unknown yapter-type'
  End If
End Macro
Macro compile@@loadYapter               address,  type,     size,     resv,     misc,     pointer,  dword0,   dword1,   dword2,   lblInputFile
  Local offs, lenght, char
  If      ( type = null )
    Break
  Else If ( type = fbc0@@yBytecode )
    If ( size = fbc0@@version )
      code amd64
        compile@@decode                 lblInputFile,                           ( dword2 + compile@@ycontent ),         dword0,   dword1
      end code
    End If
  Else If ( type = fbc0@@yStrings )
  End If
End Macro
Macro compile@@parse                    numOfArgsInRegs:( null ),     \
                                        numOfRegularRegs:( null ),    \
                                        hazCalcWithVars:( false ),    \
                                        hazCalcWithConst:( false )
  ;( reset some pointers and values )
  ;{
    compile@@ptrStringYapter            =                                       null
    compile@@lenStringYapter            =                                       null
    compile@@lenMagic                   =                                       null
    compile@@ptrCallStack               =                                       null
    compile@@ptrStack                   =                                       null
    compile@@topStack                   =                                       null
    compile@@ptrTree                    =                                       null
    compile@@ptrQueque                  =                                       null
    compile@@endQueque                  =                                       null
  ;}
  compile@@numOfArgsInRegs              =                                       ( numOfArgsInRegs )                     ;number of arguments passed via register, the rest via stack
  compile@@numOfRegularRegs             =                                       ( numOfRegularRegs )                    ;number of general purpose register
  compile@@hazCalcWithConst             =                                       ( hazCalcWithConst )                    ;is `add r1, 0x13372342` allowed?
  compile@@hazCalcWithVars              =                                       ( hazCalcWithVars )                     ;is `add r1, byte [ a ]` allowed?
  ;( indented display )
  ;{
    ;may removed later
    Local deepness
    deepness                            =                                       1
    Macro goDeeper
      deepness                          =                                       ( deepness + 1 )
    End Macro
    Macro goHigher
      deepness                          =                                       ( deepness - 1 )
    End Macro
    Macro displayDeep                   string&
      Repeat ( deepness )
        display '  '
      End Repeat
      display string
    End Macro
  ;}
  ;( list of functions i have to parse )
  ;{
    Local lblFunctions, theFunctions, ctrFunctions, numFunctions, sizeFunctions
    ctrFunctions                        =                                       null
    theFunctions                        =                                       null
    sizeFunctions                       =                                       ( 4 )
    Virtual                             At null
      lblFunctions::
        RB                              ( numFunctions * sizeFunctions )
        ;:  0x00  dword fbc-address
    End Virtual
    Struc getFunction                   offs*
      Local temp
      Load                              temp dword                              From lblFunctions:( offs * sizeFunctions )
      .                                 =                                       ( temp )
    End Struc
    Macro addFunction                   fbcAddress*
      Store                             dword fbcAddress                        At lblFunctions:( ctrFunctions * sizeFunctions )
      ctrFunctions                      =                                       ( ctrFunctions + 1 )
    End Macro
  ;}
  ;( register-arguments )
  ;{
    Local lblArguments, sizeArguments, ptrArguments
    sizeArguments                       =                                       ( 16 )
    ptrArguments                        =                                       null
    Virtual                             At null
      lblArguments::
        RB                              ( sizeArguments * compile@@numOfArgsInRegs )
        ;:  0x00  byte  type
        ;:  0x02  word  ershov
        ;:  0x08  qword value
    End Virtual
  ;}
  ;( register-allocation )
  ;{
    Local lblRegularRegister
    Virtual                             At null
      lblRegularRegister::
        RB                              compile@@numOfRegularRegs
    End Virtual
    Macro free                          register*
      If (( register >= 0 ) & ( register < compile@@numOfRegularRegs ))
        Store                           byte  null                              At    lblRegularRegister:( register )
      End If
    End Macro
    Struc allocRegister
      Local temp
      Repeat ( compile@@numOfRegularRegs )
        Load                            temp  byte                              From  lblRegularRegister:( % - 1 )
        If ( temp = 0x00 )
          .                             =                                       ( % - 1 )
          Break
        End If
      End Repeat
      .                                 =                                       nil
    End Struc
  ;}
  ;( map fbc-address -> real address )
  ;{
;    Local lblJumps, ctrJumps, numJumps, sizeJumps
;    ctrJumps                            =                                       null
;    sizeJumps                           =                                       ( 8 )
;    Virtual                             At null
;      lblJumps::
;        RB                              ( numJumps * sizeJumps )
;        ;:  0x00  dword fbc-address
;        ;:  0x00  dword real address
;    End Virtual
;    Macro addJump                       fbcAddress*,                            newAddress*
;      Store                             dword fbcAddress                        At lblJumps:(( ctrJumps * sizeJumps ) + 0x00 )
;      Store                             dword newAddress                        At lblJumps:(( ctrJumps * sizeJumps ) + 0x04 )
;      ctrJumps                          =                                       ( ctrJumps + 1 )
;    End Macro
  ;}
  ;( pure functional instructions with two arguments, e.g. `add a, b` )
  ;{
    Macro operator                      name*,                                  value*
      If ( compile@@ptrStack < 32 )
        fail < '[asm:compile] ', name, ' need 2 arguments in stack' >
      End If
      displayDeep '#', name, 10
      compile@@push                     fbc0@@tOperator,                        ( value )
    End Macro
  ;}
  uf4@@parseFile                        compile@@theInputFile,                  compile@@buildYapter,                   compile@@loadYapter
  numFunctions                          =                                       ( ctrFunctions )
  Purge operator, addJump, allocRegister, freeRegister, addFunction, getFunction, goDeeper, goHigher, displayDeep
  ;numJumps                              =                                       ( ctrJumps )
End Macro