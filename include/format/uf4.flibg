Include 'include/format/yapters.flibg'
uf4@@magicString                        Equ                                     '#!uf4:newdawn', 13, 10, 0
;( variables )
;{
;:  uf4@@tblYapter                      table with all the yapters.
;:  uf4@@ctrYapter                      current number of yapters.
;:  uf4@@numYapter                      number of all yapters.
;:  uf4@@magicSize                      offset of the yapter-table in file.
;}

Macro uf4@@theFormat                    uf4@@lenStack,                          uf4@@lenVirtualLayer
  Local uf4@@lblMagic, uf4@@ptrMagic, uf4@@lenMagic
  Local uf4@@lblYtable, uf4@@ptrYtable, uf4@@lenYtable
  Local uf4@@lblYcontent, uf4@@ptrYcontent, uf4@@lenYcontent
  Local uf4@@lblLayer, uf4@@ptrLayer, uf4@@lenLayer
  Local uf4@@lblStack, uf4@@ptrStack
  Virtual                               At ( null )
    uf4@@lblStack::
      rq                                uf4@@lenStack                           ;offset
      rq                                uf4@@lenStack                           ;lenght
  End Virtual
  uf4@@ptrStack                         =                                       ( null )
  ;( magic number )
  ;{
    uf4@@lblMagic::
    uf4@@ptrMagic                       =                                       ( $ )
    db                                  uf4@@magicString
    uf4@@lenMagic                       =                                       ( $ - uf4@@ptrMagic )
  ;}
  ;( table of yapters )
  ;{
    uf4@@lblYtable                      =                                       ( $ )
    db                                  ( 16 * uf4@@lenYtable )                 dup ( null )
    uf4@@ptrYtable                      =                                       ( null - 1 )
    Macro uf4@@addYapter                type,     size,     resv,     misc,     pointer
      uf4@@ptrYtable                    =                                       ( uf4@@ptrYtable + 1 )
      Virtual                           At null
        Store                           word  type                              At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x00 )
        Store                           word  size                              At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x02 )
        Store                           word  resv                              At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x04 )
        Store                           word  misc                              At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x06 )
        Store                           qword pointer                           At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x08 )
      End Virtual
    End Macro
    Macro uf4@@addYapterD               type,     aWord,    dword0,   dword1,   dword2
      uf4@@ptrYtable                    =                                       ( uf4@@ptrYtable + 1 )
      Virtual                           At null
        Store                           word  type                              At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x00 )
        Store                           word  aWord                             At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x02 )
        Store                           dword dword0                            At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x04 )
        Store                           dword dword1                            At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x08 )
        Store                           dword dword2                            At uf4@@lblMagic:( uf4@@lblYtable + 16 * uf4@@ptrYtable + 0x0c )
      End Virtual
    End Macro
  ;}
  ;( content of yapters )
  ;{
    uf4@@lblYcontent                    =                                       ( $ )
      rq                                ( uf4@@lenYcontent )
    uf4@@ptrYcontent                    =                                       ( null )
  ;}
  Macro uf4@@allocateLayer              lenght*
    uf4@@ptrYcontent                    =                                       ( uf4@@ptrYcontent + lenght )
  End Macro
  Struc uf4@@allocateLayer              lenght*
    .                                   =                                       ( uf4@@ptrYcontent )
    .size                               =                                       ( lenght )
    uf4@@allocateLayer                  lenght
  End Struc
  Struc uf4@@getLayer
    .lblContent                         =                                       uf4@@lblYcontent
    .lblMagic                           Equ                                     uf4@@lblMagic
    .lenLayer                           =                                       uf4@@lenLayer
    .ptrContent                         =                                       uf4@@ptrYcontent
    .ptrLayer                           =                                       uf4@@ptrLayer
  End Struc
  Macro uf4@@newLayer
    Store                               qword uf4@@ptrLayer                     At   uf4@@lblStack:( uf4@@ptrStack + 0 )
    Store                               qword uf4@@lenLayer                     At   uf4@@lblStack:( uf4@@ptrStack + 8 )
    uf4@@ptrStack                       =                                       ( uf4@@ptrStack + 16 )
    If ( uf4@@ptrStack >= uf4@@ptrStack * 16 )
      err 10, '[asm:uf4] stack-overflow in ycontent'
    End If
    uf4@@ptrLayer                       =                                       ( uf4@@ptrLayer + uf4@@lenLayer )
    uf4@@lenLayer                       =                                       ( null )
    Macro db                            data&
      Local char
      Virtual                           At 0
        DB                              data
        Repeat ( $ ), offs:0
          Load                          char byte                               from ( offs )
          Store                         byte char                               At   uf4@@lblLayer:( uf4@@ptrLayer + uf4@@lenLayer + offs )
        End Repeat
        uf4@@lenLayer                   =                                       ( uf4@@lenLayer + $ )
      End Virtual
    End Macro
    Macro rb                            size*
      uf4@@lenLayer                     =                                       ( uf4@@lenLayer + size * __byte__ )
    End Macro
    Struc db                            data&
      .                                 =                                       0
      db                                data
    End Struc
    Struc rb                            size*
      .                                 =                                       0
      rb                                size
    End Struc
    Macro dw                            data&
      Local char
      Virtual                           At 0
        DW                              data
        Repeat ( $ ), offs:0
          Load                          char byte                               from ( offs )
          Store                         byte char                               At   uf4@@lblLayer:( uf4@@ptrLayer + uf4@@lenLayer + offs )
        End Repeat
        uf4@@lenLayer                   =                                       ( uf4@@lenLayer + $ )
      End Virtual
    End Macro
    Macro rw                            size*
      uf4@@lenLayer                     =                                       ( uf4@@lenLayer + size * __word__ )
    End Macro
    Struc dw                            data&
      .                                 =                                       0
      dw                                data
    End Struc
    Struc rw                            size*
      .                                 =                                       0
      rw                                size
    End Struc
    Macro dd                            data&
      Local char
      Virtual                           At 0
        DD                              data
        Repeat ( $ ), offs:0
          Load                          char byte                               from ( offs )
          Store                         byte char                               At   uf4@@lblLayer:( uf4@@ptrLayer + uf4@@lenLayer + offs )
        End Repeat
        uf4@@lenLayer                   =                                       ( uf4@@lenLayer + $ )
      End Virtual
    End Macro
    Macro rd                            size*
      uf4@@lenLayer                     =                                       ( uf4@@lenLayer + size * __dword__ )
    End Macro
    Struc dd                            data&
      .                                 =                                       0
      dd                                data
    End Struc
    Struc rd                            size*
      .                                 =                                       0
      rd                                size
    End Struc
    Macro dq                            data&
      Local char
      Virtual                           At 0
        DQ                              data
        Repeat ( $ ), offs:0
          Load                          char byte                               from ( offs )
          Store                         byte char                               At   uf4@@lblLayer:( uf4@@ptrLayer + uf4@@lenLayer + offs )
        End Repeat
        uf4@@lenLayer                   =                                       ( uf4@@lenLayer + $ )
      End Virtual
    End Macro
    Macro rq                            size*
      uf4@@lenLayer                     =                                       ( uf4@@lenLayer + size * __qword__ )
    End Macro
    Struc dq                            data&
      .                                 =                                       0
      dq                                data
    End Struc
    Struc rq                            size*
      .                                 =                                       0
      rq                                size
    End Struc
    Macro uf4@@endLayer
      Repeat ( uf4@@lenLayer ), offs:0
        Load                            char byte                               from ( uf4@@ptrLayer + offs )
        Store                           byte char                               At   uf4@@lblMagic:( uf4@@lblYcontent + uf4@@ptrYcontent + offs )
      End Repeat
      uf4@@ptrYcontent                  =                                       ( uf4@@ptrYcontent + uf4@@lenLayer )
      If ( uf4@@ptrStack <= 0 )
        err 10, '[asm:uf4] stack-underflow in ycontent'
      End If
      uf4@@ptrStack                     =                                       ( uf4@@ptrStack - 16 )
      Load                              uf4@@ptrLayer qword                     from uf4@@lblStack:( uf4@@ptrStack + 0 )
      Load                              uf4@@lenLayer qword                     from uf4@@lblStack:( uf4@@ptrStack + 8 )
      Purge                             uf4@@endLayer
      restruc                           uf4@@endLayer
      Purge                             db, dw, dd, dq
      Purge                             rb, rw, rd, rq
      restruc                           db, dw, dd, dq
      restruc                           rb, rw, rd, rq
    End Macro
    Struc uf4@@endLayer
      .                                 =                                       uf4@@ptrYcontent
      .size                             =                                       uf4@@lenLayer
      uf4@@endLayer
    End Struc
  End Macro
  Macro yapter                          uf4@@name*,                             uf4@@args&
    Irpv                                uf4@@item,                              uf4@@lstYapterTypes
      Match                             uf4@@theName =, uf4@@theFunc =, uf4@@theStop,                                uf4@@item
        Match                           `uf4@@theName,                          `uf4@@name
          uf4@@theFunc                  uf4@@args
          Macro uf4@@theFinal           theSize,  theBase,  theFile
            uf4@@theStop                theSize,  theBase,  theFile
          End Macro
        End Match
      End Match
    End Irpv
    uf4@@base                           =                                       ( $ )
    uf4@@file                           =                                       ( $% )
    Macro end?.yapter!
      uf4@@size                         =                                       ( $% - uf4@@file )
      uf4@@theFinal                     uf4@@size,          uf4@@base,          ( uf4@@file - uf4@@lblYcontent )
      Purge end?.yapter
    End Macro
  End Macro
  Macro uf4@@endFormat
      Repeat ( uf4@@lenLayer ), offs:0
        Load                            char byte                               from ( uf4@@ptrLayer + offs )
        Store                           byte char                               At   uf4@@lblMagic:( uf4@@lblYcontent + uf4@@ptrYcontent + offs )
      End Repeat
      uf4@@ptrYcontent                  =                                       ( uf4@@ptrYcontent + uf4@@lenLayer )
    End Virtual
    uf4@@addYapter                      yapters@@tFinal,    0,                  0,                  0,                  'ycontent'
    uf4@@lenYcontent                    =                                       ( uf4@@ptrYcontent )
    uf4@@lenYtable                      =                                       ( uf4@@ptrYtable + 1 )
    Purge uf4@@newLayer, uf4@@allocateLayer
    restruc uf4@@allocateLayer
    Purge uf4@@endFormat
  End Macro
  Virtual                               At 0
    uf4@@lblLayer::
      uf4@@ptrLayer                     =                                       ( null )
      uf4@@lenLayer                     =                                       ( null )
      rb                                ( uf4@@lenVirtualLayer )
End Macro
format@@addFormat                       uf4,                uf4@@theFormat,     uf4@@endFormat













Virtual                                 At null
  uf4@@lblSignature::
  db uf4@@magicString
End Virtual
Macro uf4@@parseFile                    fileName*,                              buildYapter*,                           loadYapter*
  Local lblInputFile, ptrInputFile, lenInputFile
  Local type, size, resv, misc, dword0, dword1, dword2, pointer
  Local temp, char
  Virtual                               At null
    lblInputFile::
      file                              fileName
    lenInputFile                        =                                       ( $ )
  End Virtual
  uf4@@lenMagic                         =                                       ( null )
  While ( true )
    Load                                char byte                               from lblInputFile:( uf4@@lenMagic )
    Load                                temp byte                               from uf4@@lblSignature:( uf4@@lenMagic )
    uf4@@lenMagic                       =                                       ( uf4@@lenMagic + 1 )
    If ( temp = 0 )
      Break
    Else If ( char <> temp )
      Err 10, '[uf4] fail: invalid signature!', 10
      Break
    End If
  End While
  ptrInputFile                          =                                       ( uf4@@lenMagic )
  While ( true )
    If ( lenInputFile - ptrInputFile < 16 )
      err 10, '[uf4] fail: end of file reached before processing yapter-table!', 10
      Break
    End If
    Load                                type    word                            from lblInputFile:( ptrInputFile + 0x00 )
    Load                                size    word                            from lblInputFile:( ptrInputFile + 0x02 )
    Load                                resv    word                            from lblInputFile:( ptrInputFile + 0x04 )
    Load                                misc    word                            from lblInputFile:( ptrInputFile + 0x06 )
    Load                                pointer qword                           from lblInputFile:( ptrInputFile + 0x08 )
    Load                                dword0  dword                           from lblInputFile:( ptrInputFile + 0x04 )
    Load                                dword1  dword                           from lblInputFile:( ptrInputFile + 0x08 )
    Load                                dword2  dword                           from lblInputFile:( ptrInputFile + 0x0c )
    buildYapter                         ptrInputFile,       type,     size,     resv,     misc,     pointer,  dword0,   dword1,   dword2,   lblInputFile
    ptrInputFile                        =                                       ( ptrInputFile + 16 )
  End While
  ptrInputFile                          =                                       ( uf4@@lenMagic )
  While ( true )
    Load                                type    word                            from lblInputFile:( ptrInputFile + 0x00 )
    Load                                size    word                            from lblInputFile:( ptrInputFile + 0x02 )
    Load                                resv    word                            from lblInputFile:( ptrInputFile + 0x04 )
    Load                                misc    word                            from lblInputFile:( ptrInputFile + 0x06 )
    Load                                pointer qword                           from lblInputFile:( ptrInputFile + 0x08 )
    Load                                dword0  dword                           from lblInputFile:( ptrInputFile + 0x04 )
    Load                                dword1  dword                           from lblInputFile:( ptrInputFile + 0x08 )
    Load                                dword2  dword                           from lblInputFile:( ptrInputFile + 0x0c )
    loadYapter                          ptrInputFile,       type,     size,     resv,     misc,     pointer,  dword0,   dword1,   dword2,   lblInputFile
    ptrInputFile                        =                                       ( ptrInputFile + 16 )
  End While
End Macro

