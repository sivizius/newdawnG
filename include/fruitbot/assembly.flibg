Include 'include/fruitbot/opcodes.flibg'
Macro pushByte                          value*
  ;displayValue 'pushByte 0x', value
  fbc0@@instruction                     fbc0@@opPushByte
  fbc0@@operantByte                     value
End Macro
Macro pushWord                          value*
  ;displayValue 'pushWord 0x', value
  fbc0@@instruction                     fbc0@@opPushWord
  fbc0@@operantWord                     value
End Macro
Macro pushDWord                         value*
  ;displayValue 'pushDWord 0x', value
  fbc0@@instruction                     fbc0@@opPushDWord
  fbc0@@operantDWord                    value
End Macro
Macro pushQWord                         value*
  ;displayValue 'pushQWord 0x', value
  fbc0@@instruction                     fbc0@@opPushQWord
  fbc0@@operantQWord                    value
End Macro
Macro pushConstant                      value*
  ;displayValue 'pushConstant 0x', value
  If      (( value >= -( 1 shl  7 )) & ( value < ( 1 shl  7 )))
    pushByte                            value
  Else If (( value >= -( 1 shl 15 )) & ( value < ( 1 shl 15 )))
    pushWord                            value
  Else If (( value >= -( 1 shl 31 )) & ( value < ( 1 shl 31 )))
    pushDWord                           value
  Else
    pushQWord                           value
  End If
End Macro
Macro add                               ignore
  fbc0@@instruction                     fbc0@@opAdd
End Macro
Macro sub                               ignore
  fbc0@@instruction                     fbc0@@opSub
End Macro
Macro mul                               ignore
  fbc0@@instruction                     fbc0@@opMul
End Macro
Macro div                               ignore
  fbc0@@instruction                     fbc0@@opDiv
End Macro
Macro mod                               ignore
  fbc0@@instruction                     fbc0@@opMod
End Macro
Macro let                               ignore
  fbc0@@instruction                     fbc0@@opLet
End Macro
Macro stop                              ignore
  fbc0@@instruction                     fbc0@@opStop
End Macro
Macro call                              address*
  Local temp
  temp                                  fbc0@@getToken
  pushConstant                          ( address - temp.lenString )
  fbc0@@instruction                     fbc0@@opCall
End Macro
Macro allocGlobal                       ignore
  fbc0@@instruction                     fbc0@@opAllocGlobal
End Macro
Macro allocLocal                        ignore
  fbc0@@instruction                     fbc0@@opAllocLocal
End Macro
Macro allocate                          ignore
  fbc0@@instruction                     fbc0@@opAllocate
End Macro
Macro lbl                               name
  fbc0@@instruction                     fbc0@@opLbl
  fbc0@@operantString                   `name
End Macro
Macro when                              address*
  Local temp
  temp                                  fbc0@@getToken
  pushConstant                          ( address - temp.lenString )
  fbc0@@instruction                     fbc0@@opWhen
End Macro
Macro next                              address*
  Local temp
  temp                                  fbc0@@getToken
  pushConstant                          ( address - temp.lenString )
  fbc0@@instruction                     fbc0@@opNext
End Macro
Macro loop                              address*
  Local temp
  temp                                  fbc0@@getToken
  pushConstant                          ( address - temp.lenString )
  fbc0@@instruction                     fbc0@@opLoop
End Macro
Macro break
  fbc0@@instruction                     fbc0@@opBreak
End Macro
Macro done
  fbc0@@instruction                     fbc0@@opDone
End Macro
Macro fbc0@@killMySelf
  Purge pushByte, pushWord, pushDWord, pushQWord
  Purge add, sub, mul, div, mod
End Macro

